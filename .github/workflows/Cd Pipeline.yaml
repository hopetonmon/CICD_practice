# This is a basic GitHub Actions workflow for a Continuous Deployment (CD) pipeline.
# TIP:MAKE SURE YOUR REGIONS MATCH UP!!!!!!!!!!  This prevents terraform form trying to destroy resources that are not in the same region!!!!
# TIP: For example, Terraform looks for environment variables starting with TF_VAR_ to set input variables, so you don't need to pass them explicitly via command-line flags.
name: CD Pipeline

on:
  workflow_dispatch: # Run of this workflow is triggered Manually via Actions Tab on GitHUb

jobs:
  validate-and-plan: #Name of Job
    runs-on: ubuntu-latest
    env: #Environment variables used in Pipeline. Variables pulled form Git Secrets
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }} #This enviornment name is needed for terraform to automatically connecct to Terraform Cloud Login
      TF_VAR_HOPETONMON_COPY_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_HOPETONMON_COPY_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_AWS_REGION: "us-east-2"
      TF_VAR_AVAILABILITY_ZONE: "us-east-2a"
      TF_VAR_AVAILABILITY_ZONE2: "us-east-2b"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Plan
        run: terraform plan

  deploy: #Name of Job
    needs: [validate-and-plan]
    runs-on: ubuntu-latest
    env:
      TF_TOKEN_app_terraform_io: ${{ secrets.TF_API_TOKEN }}
      TF_VAR_HOPETONMON_COPY_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_HOPETONMON_COPY_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_AWS_REGION: "us-east-2"
      TF_VAR_AVAILABILITY_ZONE: "us-east-2a"
      TF_VAR_AVAILABILITY_ZONE2: "us-east-2b"
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: |
          echo "Applying Terraform changes..."
          terraform apply -auto-approve