# This is a basic GitHub Actions workflow for a Continuous Deployment (CD) pipeline.

# The name of the workflow as it will appear in the GitHub UI.
name: CD Pipeline

# The event that triggers the workflow. In this case, it runs whenever
# triggered manually from the "Actions" tab in your GitHub repository.  You will see a "Run workflow" button, and you can even provide input parameters if needed.
on:
  workflow_dispatch:

# Define the jobs for the pipeline.
jobs:
  # Job 1: Validate and plan the Terraform changes.
  validate-and-plan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Terraform
        # This action installs the Terraform CLI on the runner.
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Login
        run: terraform login -token=${{ secrets.TF_API_TOKEN }}
        
      - name: Terraform Init
        # Initialize the working directory and install required providers.
        run: terraform init
      
      - name: Terraform Plan
        # This step creates a plan of what Terraform will do.
        # It does not make any changes but is a crucial safety check.
        run: terraform plan
        env:
          TF_VAR_HOPETONMON_COPY_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_HOPETONMON_COPY_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_AWS_REGION: "us-east-1"
          TF_VAR_AVAILABILITY_ZONE: "us-east-1a"
          TF_VAR_AVAILABILITY_ZONE2: "us-east-1b"

  # Job 2: Deploy the infrastructure.
  deploy:
    # This job will only run if the 'validate-and-plan' job was successful.
    needs: [validate-and-plan]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        # We need to check out the code again in this job to access the .tf file.
        uses: actions/checkout@v4

      - name: Setup Terraform
        # Set up the Terraform CLI again for this job.
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Login
        run: terraform login -token=${{ secrets.TF_API_TOKEN }}
        
      - name: Terraform Init
        # Initialize the working directory and install required providers.
        run: terraform init
        
      - name: Terraform Apply
        # This applies the terraform code
        run: |
          echo "Applying Terraform changes..."
          terraform apply -auto-approve
        env:
          TF_VAR_HOPETONMON_COPY_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_HOPETONMON_COPY_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_AWS_REGION: "us-east-1"
          TF_VAR_AVAILABILITY_ZONE: "us-east-1a"
          TF_VAR_AVAILABILITY_ZONE2: "us-east-1b"
